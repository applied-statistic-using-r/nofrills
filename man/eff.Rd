% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eff.R
\name{eff}
\alias{eff}
\alias{..}
\title{Low-cost anonymous functions}
\usage{
eff(...)

..(...)
}
\arguments{
\item{...}{Function declaration (see below).}
}
\value{
\code{eff()} returns a function whose enclosing environment is the calling
environment of \code{eff()}.
}
\description{
\code{eff()} enables you to concisely create (anonymous) functions of arbitrary
call signature. \code{..()} is a less visually noisy alias of \code{eff()}.
}
\section{Function declarations}{
 A \emph{function declaration} is a concise
expression that specifies a functionâ€™s arguments and body. It is a
comma-separated expression of the form
\preformatted{    arg1, arg2, ..., argN ~ body}
The part on the left of \code{~} corresponds to what you would write in a
conventional function declaration \code{function(...)}: each of \code{arg1}, \code{arg2},
\dots, \code{argN} is either a bare argument (e.g., \code{x} or \code{...}) or an argument
with default value (e.g., \code{x = 1}). The part on the right of \code{~} is the
function body, i.e., an expression of the arguments.
}

\examples{
f <- eff(x ~ x + 1)
f(1)

f <- eff(x, y ~ x + y)
f(1, 2)

f <- eff(x, y = 2 ~ x + y)
f(1)

f <- eff(x, y = 1, ... ~ log(x + y, ...))
f(1, 1, base = 2)

# to specify '...' in the middle of the call signature, write '... = '
f <- eff(x, ... = , y ~ log(x + y, ...))
f(1, base = 2, y = 1)

# use one-sided formula for constant functions or commands
eff(~ NULL)
eff(~ message("!"))

# unquoting (via `!!` or UQ()) is supported
zero <- 0
is_positive <- eff(x = UQ(zero) ~ x > !! zero)
is_positive()
is_positive(1)
is_positive(-1)

}
