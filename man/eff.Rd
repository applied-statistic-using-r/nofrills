% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eff.R
\name{eff}
\alias{eff}
\alias{..}
\title{Low-cost anonymous functions}
\usage{
eff(..., ..env = parent.frame())

..(..., ..env = parent.frame())
}
\arguments{
\item{...}{Function declaration, which supports rlang’s
\link[rlang:quasiquotation]{quasiquotation} syntax (see below).}

\item{..env}{Environment in which to create the function (i.e., the
function’s \link[base:environment]{enclosing environment}).}
}
\value{
A function whose enclosing environment is \code{..env}.
}
\description{
\code{eff()} enables you to create (anonymous) functions, of arbitrary call
signature. The main advantages of \code{eff()} over the conventional
\dQuote{\code{function(<arguments>) <body>}} declaration are:
\itemize{
\item It is shorter: \code{eff(x, y = 1 ~ x + y)} is equivalent to
\code{function(x, y = 1) x + y}.
\item It is safer: by enabling \link[rlang:quasiquotation]{quasiquotation},
\code{eff()} allows you to \dQuote{burn in} values, which guards your
function from being affected by unexpected scope changes (see
\emph{Examples}).
}
For even less visual noise, \code{..()} is provided as an alias of \code{eff()}.
}
\section{Function declarations}{
 A \emph{function declaration} is an expression
that specifies a function’s arguments and body, as a comma-separated
expression of the form\preformatted{    arg1, arg2, ..., argN ~ body
}

or\preformatted{    arg1, arg2, ..., argN, ~ body
}

(Note the final comma in the second case. This is relevant for
\link[rlang:UQ]{unquoting} the body, see below.)

To the left of \code{~}, you write a conventional function-argument declaration,
just as in \code{function(<arguments>)}: each of \code{arg1}, \code{arg2}, \dots, \code{argN}
is either a bare argument (e.g., \code{x} or \code{...}) or an argument with default
value (e.g., \code{x = 1}). To the right of \code{~}, you write the function body,
i.e., an expression of the arguments.

\subsection{Quasiquotation in function declarations}{
All parts of the function declaration support rlang’s
\link[rlang:quasiquotation]{quasiquotation} syntax.
}
}

\examples{
eff(x ~ x + 1)

eff(x, y ~ x + y)

eff(x, y = 2 ~ x + y)

eff(x, y = 1, ... ~ log(x + y, ...))

## to specify '...' in the middle, write '... = '
eff(x, ... = , y ~ log(x + y, ...))

## use one-sided formula for constant functions or commands
eff(~ NA)
eff(~ message("!"))

## unquoting is supported (using `!!` or UQ() from rlang)
zero <- 0
eff(x = UQ(zero) ~ x > !! zero)

## formals and function bodies can also be spliced in
f <- function(x, y) x + y
g <- function(y, x, ...) x - y
frankenstein <- eff(!!! formals(f), ~ !! body(g))
stopifnot(identical(frankenstein, function(x, y) x - y))

}
